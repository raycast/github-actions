name: "Slack Pull Request Activity"
description: "A GitHub action to notify Slack about pull request activities."
inputs:
  pathToSlackStreamMapping:
    description: "Mapping of file paths to Slack webhook URLs for dynamic routing"
    required: false
    type: string
  slackStream:
    description: "Direct Slack webhook URL to send notifications to"
    required: false
    type: string
runs:
  using: "composite"
  steps:
    - name: Install slackify-markdown
      shell: bash
      run: npm install slackify-markdown

    - name: Notify Slack
      uses: actions/github-script@v7
      env:
        SLACK_STREAM: ${{ inputs.slackStream }}
        PATH_TO_SLACK_STREAM_MAPPING: ${{ inputs.pathToSlackStreamMapping }}
      with:
        script: |
          const slackifyMarkdown = require('slackify-markdown');
          const pr = context.payload.pull_request;
          const action = context.payload.action;
          const actor = context.actor;
          const prEvents = {
            opened: {
              color: "#36A54F",
              message: "opened"
            },
            closed: {
              color: "#6F42C1",
              message: "closed"
            },
            ready_for_review: {
              color: "#36A54F",
              message: "ready for review"
            },
            reopened: {
              color: "#36A54F",
              message: "reopened"
            }
          };
          const eventData = prEvents[action] || { color: "#36A54F", message: action };

          // Support both pathToSlackStreamMapping and direct slackStream
          let slackStreams = new Set();
          let streamPathMap = new Map();

          const slackStream = process.env.SLACK_STREAM;
          if (slackStream) {
            slackStreams.add(slackStream);
          }

          const pathToSlackStreamMapping = process.env.PATH_TO_SLACK_STREAM_MAPPING;
          if (pathToSlackStreamMapping) {
            try {
              const parsedMapping = JSON.parse(pathToSlackStreamMapping);
              const files = await github.paginate(github.rest.pulls.listFiles, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
              });
              console.log(`Found ${files.length} changed files.`);
              for (const file of files) {
                for (const [path, slackStream] of Object.entries(parsedMapping)) {
                  if (file.filename.startsWith(path)) {
                    console.log(`Add stream for: ${file.filename}`)
                    slackStreams.add(slackStream);
                    streamPathMap.set(slackStream, path);
                  }
                }
              }
            } catch (error) {
              console.error('Failed to parse pathToSlackStreamMapping JSON:', error);
            }
          }

          if (slackStreams.size === 0) {
            console.log("No Slack streams configured for notification.");
            return;
          } else {
            console.log(`Notifying ${slackStreams.size} Slack streams.`);
          }

          const prUrl = pr.html_url;
          const prTitle = pr.title;
          const prNumber = pr.number;
          const prBody = slackifyMarkdown(pr.body) || "No description provided.";
          const actorUrl = `https://github.com/${actor}`;
          const prAuthor = pr.user.login;
          const prAuthorUrl = `https://github.com/${prAuthor}`;
          const mainText = `Pull request ${eventData.message} by <${actorUrl}|${actor}>`;

          const prLink = `*<${prUrl}|#${prNumber}: ${prTitle}>*`;

          const attachmentText = action === "closed" ? `${prLink}` : `${prLink}\n\n${prBody}`;
          const attachment = {
            color: eventData.color,
            "mrkdwn_in": ["text"],
            text: attachmentText,
          };

          const payload = {
            text: mainText,
            attachments: [attachment]
          };

          let anyFailures = false;
          for (const slackStream of slackStreams) {
            try {
              const response = await fetch(slackStream, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload),
              });

              if (!response.ok) {
                console.error(`Slack notification failed: ${response.statusText}`);
                anyFailures = true;
              } else {
                const matchedPath = streamPathMap.get(slackStream);
                const pathInfo = matchedPath ? ` (path matched: ${matchedPath})` : "";
                console.log(`Notification sent to Slack webhook: ${slackStream}${pathInfo}`);
              }
            } catch (error) {
              console.error(`Error sending notification to Slack webhook: ${slackStream}`, error);
              anyFailures = true;
            }
          }

          if (anyFailures) {
            throw new Error('One or more Slack notifications failed.');
          }
